主要针对java堆和方法区进行垃圾回收    java栈 本地方法区  程序计数器随线程生灭
垃圾回收 garbage collection GC
一 判断对象已死
1 引用计数法 给每个对象添加一个引用计数器 有引用计数加1 引用失效减1 计数为0对象不能再使用 难以解决对象间仙湖引用，相互引用导致计数都不为0 java不使用
2 根搜索算法 通过一系列名为"GC Roots" 的对象作为起始点，从这些节点向下搜索，经过路径称为引用链 ，当一个对象到GC Roots之间无引用链 则对象不可用
对象间用关联 但没有到根的引用链 将判定可回收
GC Roots的对象 虚拟机栈中的引用对象 方法区中类静态属性 常量引用对象本地方法栈中JNI引用对像
引用分类 强引用 软 弱 
强引用 只用引用存在，垃圾回收器永远不会收掉被引用对像
软引用 还有用，并非必须 在发生内存溢出之前，会将所引对象列入回收范围并进行二次回收
弱引用  非必须，强度更弱 只能生存到下一次垃圾回收之前垃圾收集器工作时，无论内存是否足够，都会回收
虚引用 不会影响其生存时间 无法通过虚引用取得一个对象实例 使用目的是在回收时收到系统通知
在根搜索中不可达对象，并非直接死，经历两次标记判死。搜索发现无引用链，一次标记并进行一次筛选，筛选条件是有必要进行执行finalize方法，
若覆盖过finalize方法或被吊用过，则没必要。有必要执行finalize方法，对像放置到F-Queue队列中等待执行，GC会在F-Queue，进行二次标记，
此时若与引用链上建立关联就会将自己拯救，任何对象finalize方法会被系统自动调用一次，只有一次，下次回收方法不再执行
finalize方法不确定性大开销大不推荐，不如使用try-finally
方法区回收 废弃常量 无用的类
无用的类判定 1所有实例已被回收2类的ClassLoader已经被回收3类的java.lang.Class对象无引用，无法通过反射获得该类的方法。








